# Etymol Game Development

Etymol is an etymology-based daily word game where players guess English words by exploring their etymological relationships. Players start with a clue word and must discover related English words by understanding word origins and relationships.

## Project Structure
- `game.js`: Core game logic and UI interactions
- `explorer.js`: Tree visualization and exploration features
- `build_trees.py`: Generates game data from etymological database
- `generate_system_words.py`: Creates word validation list
- `game_data.js`: Generated game puzzles and word trees
- `system_words.js`: List of valid English words for validation
- `index.html`: Main game interface
- `style.css`: Game styling and animations

## Current State
- Web-based etymology tree guessing game
- D3.js visualization of word trees
- English words highlighted in gold (both revealed and redacted)
- Glosses shown as tooltips on hover
- Reveal All button for giving up
- Clean, dark theme UI
- Non-English words shown in anglicized form when revealed
- Animated feedback for correct/incorrect guesses
- Improved dropdown positioning and search functionality
- System words-based suggestions

## Key Design Decisions
1. Technology
   - Fully browser-based and statically served
   - No reliance on a database
   - JS, CSS, HTML
   - No react
   - D3.js for tree visualization
   - EtymDB for source data, laid out so:
   

data

    etymdb.csv is the raw extracted DB csv file
        Extracted from wiktionary.xml, itself extracted from enwiktionary-latest-pages-articles.xml - neither have been added to the repo because of their size, if you need them, please contact the repo owner
    split_etymdb contains the extracted database, separated in several files for easier data analysis
        etymdb_values: Word ix, Lang identifier (in wiki code), Lexeme, Gloss (English translation)
        etymdb_links_info: Direct relation type, child word ix, parent word ix
            If the parent index is negative (usually for derivation or compounding relations), it means that several parents are implied: the negative index will be found in etymdb_links_index, in association with the several parents indices
        etymdb_links_index: Multiple parents relation ix, parent 1 ix, parent 2 ix, ... parent n ix



2. Tree Generation:
   - Minimum 5 nodes per tree
   - At least 4 English words required
   - At least 1 branching point
   - Prefer trees with multiple branches
   - Score based on language variety and tree complexity
   - Non-English words stored with both original and anglicized forms
   - Separate filtered and unfiltered tree generation
   - Filtered trees optimized for gameplay
   - Unfiltered trees preserve complete etymology data

3. UI/UX:
   - Dark theme for better readability
   - Gold highlighting for English words (both revealed and redacted)
   - Tooltips for glosses and word information on hover
   - Reveal All button in red to indicate give-up action
   - Animated feedback for correct/incorrect guesses
   - Non-English words displayed in anglicized form for readability
   - Tree explorer with search and filtering capabilities
   - Side-by-side comparison of filtered and unfiltered trees
   - Clear indication when filtered trees are not available
   - Modern, responsive design
   - Improved dropdown positioning under input field
   - System words-based suggestions for better gameplay

4. Game Logic:
   - Words revealed when guessed or when all children are revealed
   - English words are the target words to guess
   - Clue word is pre-revealed
   - Related words list for validation
   - Score-based tree selection for game puzzles
   - System words used for suggestions and validation

## Recent Changes
- Implemented scoring system based on unrevealed non-English words
- Added visual feedback for remaining guesses and words to find
- Switched from system_words.txt to system_words.js for word validation
- Improved tree generation with better scoring and filtering
- Enhanced UI with more intuitive progress indicators

## Known Issues/Limitations
- Tree generation can be slow for complex etymologies
- Some rare or archaic words may not be in the system words list
- Tooltips may overlap in dense tree visualizations
- Mobile responsiveness needs improvement

## Development Notes
- Keep game_data.js in git (generated data)
- Exclude word_frequencies.txt (downloaded data)
- Maintain clean, semantic git commits
- Focus on intuitive UI without explanatory text
- Store both original and anglicized forms of non-English words for flexibility
- Use tree explorer for data analysis and puzzle design
- Generate both filtered and unfiltered trees for development
- Ensure tooltips provide clear and concise information
- Maintain consistent animation timing for user feedback

## Next Steps
- Improve tree scoring and filtering criteria
- Add more visual polish to game interface
- Enhance tree explorer features
- Optimize data generation process
- Add more language variety to puzzles
- Implement daily puzzle generation
- Add user statistics and progress tracking
- Consider adding keyboard shortcuts for common actions
- Explore additional visual feedback mechanisms
- Optimize tooltip positioning and content

